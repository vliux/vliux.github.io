<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">vliux's story</title>
<subtitle type="text">A beautiful theme.</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://vliux.me/feed.xml" />
<link rel="alternate" type="text/html" href="http://vliux.me" />
<updated>2017-09-10T15:25:27+08:00</updated>
<id>http://vliux.me/</id>
<author>
  <name>vliux</name>
  <uri>http://vliux.me/</uri>
  <email>swordmanliuxin@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[八卦田的夏天]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/gallery/summer_baguatian/" />
  <id>http://vliux.me/gallery/summer_baguatian</id>
  <published>2017-09-10T14:45:00+08:00</published>
  <updated>2017-09-10T14:45:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;今年，在一家新媒体公司短暂任职过半年。最有意思的是，公司直接坐落在景区里 -- 背靠凤凰山，面朝八卦田。&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;green&quot;&gt;照片全部来自Google Nexus 6P手机。&lt;/font&gt;&lt;/p&gt;

&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/s_bagua/101.jpg&quot;&gt;&lt;img src=&quot;/images/p/s_bagua/101.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;去公司报到的那天，田里的包菜开的正欢，高耸的菜叶好似裙摆。&lt;/p&gt;

&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/s_bagua/102.jpg&quot;&gt;&lt;img src=&quot;/images/p/s_bagua/102.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;随之而来的就是漫长的梅雨季。&lt;/p&gt;

&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/s_bagua/104.jpg&quot;&gt;&lt;img src=&quot;/images/p/s_bagua/104.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;雨天出游更有感觉。&lt;/p&gt;

&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/s_bagua/103.jpg&quot;&gt;&lt;img src=&quot;/images/p/s_bagua/103.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;5月底，雨季的间歇，农忙。&lt;/p&gt;

&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/s_bagua/105.jpg&quot;&gt;&lt;img src=&quot;/images/p/s_bagua/105.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;向日葵和孩童。&lt;/p&gt;

&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/s_bagua/100.jpg&quot;&gt;&lt;img src=&quot;/images/p/s_bagua/100.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;6月绽放的向日葵，预示着炎热夏季的临近。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://vliux.me/gallery/summer_baguatian/&quot;&gt;八卦田的夏天&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on September 10, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[杭州Hangzhou]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/gallery/hangzhou/" />
  <id>http://vliux.me/gallery/hangzhou</id>
  <published>2017-04-10T18:03:00+08:00</published>
  <updated>2017-04-10T18:03:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;我出生在这里。除了求学、北漂的五个春秋，我也一直生活在她怀里。&lt;/p&gt;
&lt;p&gt;她的美，缺少那种磅礴的大气。因此横构图里的她，总是有点平淡。如果使用竖构图，再把镜头拉近，却能在每个角落里给我感动。&lt;/p&gt;

&lt;p&gt;西湖(下图)是最有名的景点。因此，好天气的时候，游客非常多。再加上稍显过多的人为装饰，使得它总有些杂乱和造作的感觉。在雨雪天，游客稀少的日子里，倒更有一番韵味。&lt;/p&gt;
&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/hz/vliux_hz-1974.jpg&quot;&gt;&lt;img src=&quot;/images/p/hz/vliux_hz-1974.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/hz/vliux_hz-02977.jpg&quot;&gt;&lt;img src=&quot;/images/p/hz/vliux_hz-02977.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p/&gt;
&lt;p&gt;通往灵隐的路叫“九里松”。路两边全是高耸入云的松树、水杉和樟树(下左图）。灵隐寺坐落在飞来峰景区，相比景区内其他几座寺庙，显得更为气派。但它过大的知名度导致游客数量很多。
如果只想安静地走一走，或赶早到达寺中，或不妨试试边上的永福寺(下图右)。&lt;/p&gt;
&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/hz/vliux_hz-1273.jpg&quot;&gt;&lt;img src=&quot;/images/p/hz/vliux_hz-1273.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/hz/vliux_hz-1351.jpg&quot;&gt;&lt;img src=&quot;/images/p/hz/vliux_hz-1351.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p/&gt;
&lt;p&gt;浙江大学玉泉校区新桥门附近（下图左）的流水和秋天的黄叶搭配很美。河水从学校边上的山上流下来，绕着校园东边而过。&lt;/p&gt;
&lt;p&gt;西溪湿地(下图右)作为城市的“肺”，它的景是纯天然的。因此缺乏人工景观的那种有序感，更需要摄影师耐心发掘。&lt;/p&gt;
&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/hz/vliux_hz-03177.jpg&quot;&gt;&lt;img src=&quot;/images/p/hz/vliux_hz-03177.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/hz/vliux_hz-2421.jpg&quot;&gt;&lt;img src=&quot;/images/p/hz/vliux_hz-2421.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p/&gt;
&lt;p&gt;虎跑(下图左)虽然很小，对摄影师来说却相当高产。它是杭州之美的一个典型代表：一个小小的、安静怡和的世外桃源。这不正是每个人心中那片安宁的一亩三分地嘛？&lt;/p&gt;
&lt;p&gt;我现在生活在钱塘江边(下图右)。江水在大多数时候都波澜不惊，显得相当平淡。但每个月的农历18，海水回灌江中，掀起巨浪，蔚为壮观。只是我一直都没有办法拍出一张满意的照片。&lt;/p&gt;
&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/hz/vliux_hz-2305.jpg&quot;&gt;&lt;img src=&quot;/images/p/hz/vliux_hz-2305.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/hz/vliux_hz-02363.jpg&quot;&gt;&lt;img src=&quot;/images/p/hz/vliux_hz-02363.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  &lt;p&gt;&lt;a href=&quot;http://vliux.me/gallery/hangzhou/&quot;&gt;杭州Hangzhou&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on April 10, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[布拉格Prague]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/gallery/prague/" />
  <id>http://vliux.me/gallery/prague</id>
  <published>2017-04-09T22:56:00+08:00</published>
  <updated>2017-04-09T22:56:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/prague/vliux_prague_201607-01790.jpg&quot;&gt;&lt;img src=&quot;/images/p/prague/vliux_prague_201607-01790.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/prague/vliux_prague_201607-01795.jpg&quot;&gt;&lt;img src=&quot;/images/p/prague/vliux_prague_201607-01795.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/prague/vliux_prague_201607-3334.jpg&quot;&gt;&lt;img src=&quot;/images/p/prague/vliux_prague_201607-3334.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/prague/vliux_prague_201607-3109.jpg&quot;&gt;&lt;img src=&quot;/images/p/prague/vliux_prague_201607-3109.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/prague/vliux_prague_201607-3603.jpg&quot;&gt;&lt;img src=&quot;/images/p/prague/vliux_prague_201607-3603.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/prague/vliux_prague_201607-3077.jpg&quot;&gt;&lt;img src=&quot;/images/p/prague/vliux_prague_201607-3077.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/prague/vliux_prague_201607-3339.jpg&quot;&gt;&lt;img src=&quot;/images/p/prague/vliux_prague_201607-3339.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/prague/vliux_prague_201607-3505.jpg&quot;&gt;&lt;img src=&quot;/images/p/prague/vliux_prague_201607-3505.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
  &lt;p&gt;&lt;a href=&quot;http://vliux.me/gallery/prague/&quot;&gt;布拉格Prague&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on April 09, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[钱塘江日落]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/gallery/qtj-sunset/" />
  <id>http://vliux.me/gallery/qtj-sunset</id>
  <published>2017-03-20T18:33:00+08:00</published>
  <updated>2017-03-20T18:33:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-03492.jpg&quot;&gt;&lt;img src=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-03492.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-02874.jpg&quot;&gt;&lt;img src=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-02874.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-02437.jpg&quot;&gt;&lt;img src=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-02437.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-02432.jpg&quot;&gt;&lt;img src=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-02432.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;a href=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-03427.jpg&quot;&gt;&lt;img src=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-03427.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-1.jpg&quot;&gt;&lt;img src=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-04477.jpg&quot;&gt;&lt;img src=&quot;/images/p/qtj-sunset/vliux_qtj_sunset_2017-04477.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;



  &lt;p&gt;&lt;a href=&quot;http://vliux.me/gallery/qtj-sunset/&quot;&gt;钱塘江日落&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on March 20, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[花落花起]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/gallery/flower-life/" />
  <id>http://vliux.me/gallery/flower-life</id>
  <published>2017-03-20T17:59:00+08:00</published>
  <updated>2017-03-20T17:59:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;

&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/flower-life/vliux_flower_life_2017-3266.jpg&quot;&gt;&lt;img src=&quot;/images/p/flower-life/vliux_flower_life_2017-3266.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/flower-life/vliux_flower_life_2017-3295.jpg&quot;&gt;&lt;img src=&quot;/images/p/flower-life/vliux_flower_life_2017-3295.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/p/flower-life/vliux_flower_life_2017-3223.jpg&quot;&gt;&lt;img src=&quot;/images/p/flower-life/vliux_flower_life_2017-3223.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;a href=&quot;/images/p/flower-life/vliux_flower_life_2017-3327.jpg&quot;&gt;&lt;img src=&quot;/images/p/flower-life/vliux_flower_life_2017-3327.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;


  &lt;p&gt;&lt;a href=&quot;http://vliux.me/gallery/flower-life/&quot;&gt;花落花起&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on March 20, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[雨后静物]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/gallery/macro-static/" />
  <id>http://vliux.me/gallery/macro-static</id>
  <published>2017-03-17T15:54:00+08:00</published>
  <updated>2017-03-17T15:54:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">&lt;div class=&quot;divTable&quot; style=&quot;width: 100%;&quot; &gt;
&lt;div class=&quot;divTableBody&quot;&gt;

&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/gallery/macro/vliux_macro_2017-0549.jpg&quot;&gt;&lt;img src=&quot;/images/gallery/macro/vliux_macro_2017-0549.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/gallery/macro/vliux_macro_2017-0564.jpg&quot;&gt;&lt;img src=&quot;/images/gallery/macro/vliux_macro_2017-0564.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/gallery/macro/vliux_macro_2017-4143.jpg&quot;&gt;&lt;img src=&quot;/images/gallery/macro/vliux_macro_2017-4143.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/gallery/macro/vliux_macro_2017-4169.jpg&quot;&gt;&lt;img src=&quot;/images/gallery/macro/vliux_macro_2017-4169.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;divTableRow&quot;&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/gallery/macro/vliux_macro_2017-4346.jpg&quot;&gt;&lt;img src=&quot;/images/gallery/macro/vliux_macro_2017-4346.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;divTableCell&quot;&gt;&lt;a href=&quot;/images/gallery/macro/vliux_macro_2017-4366.jpg&quot;&gt;&lt;img src=&quot;/images/gallery/macro/vliux_macro_2017-4366.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;



  &lt;p&gt;&lt;a href=&quot;http://vliux.me/gallery/macro-static/&quot;&gt;雨后静物&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on March 17, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Gradle DSL from developer perspective]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/blog,/gradle/gradle-dsl-dev-perspective/" />
  <id>http://vliux.me/blog,/gradle/gradle-dsl-dev-perspective</id>
  <published>2016-03-26T13:47:00+08:00</published>
  <updated>2016-03-26T13:47:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">Gradle is the official build tool for Android. Compared with Maven, it’s more dynamic so developers can easily define their customized building logics.

It could easy for anyone to be lost in the new Gradle world --- DSK, task re-ordering/injection, incremental build, Gradle demo --- there are a lot for new features and concepts to learn. From an Android developer's point of view, understanding the configuration language of Gradle is the most important. So let's take a deep look into Gradle DSL.
&lt;p&gt;

The Gradle system can be divided into two structural parts: Gradle runtime and Gradle plugins. Gradle runtime is the libs and executables inside the Gradle installation dir (also the Gradlew scripts and the libs inside gradle/wrapper folder if you are using a Gradle wrapper). Runtime works as a low-level service which start up the build system and reads the configuration files (build.gradle, settings.gradle). It also loads plugins mentioned in the configuration files. The concrete build logic of tasks are mostly defined by plugins. For Android, the logic of how to build an apk/aar is declared inside the Google android plugin.  
&lt;p&gt;

Every Android developer could already know the content of build.gradle and settings.gradle under your project. In this article we call the set of Gradle configration files &quot;Gradle DSL&quot;. There are multiple confiugrations like dependencies, android, publish etc. The configuration language of Gradle is Groovy. The below configuration will be used thoroughly in this article:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenLocal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://somewhere.com/mvn/repository&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;gradle:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buildToolsVersion&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;23.0.2&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mainifest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcFile&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AndroidManifest.xml&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;aidl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;How does Gradle plugin loaded? Where the configuration block &quot;android&quot; is defined?&lt;/h3&gt;
The &quot;apply&quot; in the 1st line specifies the name of plugin to be loaded. The &quot;buildscript&quot; block (line 7-15) specifies the repository to fine the plugin jar file.
In our example we define two repositories: local Maven repo and a public Maven repo. The &quot;classpath&quot; line (line 13) specifies the GAV coordinate for the plugin: group=com.android.tools.build, artifact=gradle, version=1.3.1. With GAV, Gradle runtime could locate and download the plugin artifact from Maven repository.

By extracting gradle-1.3.1.jar, we can find there are plenty of .properties files inside --- one of them (file name: com.android.library.properties) defines the implementation class of plugin 'com.android.library':
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gradle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LibraryPlugin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Gradle runtime will load the class and execute the menthod apply(Project). The core logic of LibraryPlugin.apply() is at its supper class, which is com.android.build.gradle.BasePlugin.apply():
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;SpanRecorders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BASE_PLUGIN_PROJECT_BASE_EXTENSTION_CREATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;createExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;SpanRecorders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BASE_PLUGIN_PROJECT_TASKS_CREATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;createTasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

We take a deep look into the method createExtension(). Extension is a conception in Gradle. In fact, one extension defines how a configuration block in DSL is parsed. The implementation of createExtension() is like following:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getExtensionClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectInternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;androidBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdkHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;buildTypeContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productFlavorContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signingConfigContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;extraModelInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

The first parameter &quot;android&quot; of project.extensions.create() is relate to the configuration block with the same name in Gradle DSL. Here the plugin links the String &quot;android&quot; in DSL to a class returned from getExtensionClass(), which is the second parameter of project.extensions.create(). LibraryPlugin.getExtensionClass() is as follows:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getExtensionClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LibraryExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

So far, &quot;android&quot; in DSL is mapped to Extension class com.android.build.gradle.LibraryExtension. When Gradle reads every sub-configuration entry in &quot;android{}&quot;, it tries to locate the related field or method in LibraryExtension class.

&lt;h3&gt;How configuration entries like &quot;compileSdkVersion&quot; works?&lt;/h3&gt;
When I was a newbie in the Gradle world, the only way to know the configuration entries are by reading Gradle documents. However, documents are far from perfect so it's not easy to know how to config all the entries. Frankly speaking, if you get to know a little bit how Gradle plugin works, you can query all the configration entries available by reading a little code.

Let's fall back to the previous sample. com.android.build.gradle.LibraryExtension derives from BaseExtension. Take a look at the definition of BaseExtension:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compileSdkVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;checkWritability&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compileSdkVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android-&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

In fact, the line &quot;compileSdkVersion 23&quot; in DSL, maps to the invokation of method BaseExtension.compileSdkVersion(int). For every configuration name &quot;abcd&quot;, Gradle tries to set the value in the related Extension class:
- abcd() method
- setAbcd() method
- field abcd
So you can also config it like &quot;compileSdkVersion 'android-23'&quot;. After the version of SDK is set, Gradle will generate the path to the build-tools. You could also see there are bunch of other properties defined in BaseExtension like: useLibrary(String), buildTypes(Action), manifestOptions(Action), signingConfigs(Action) --- they are all related to the entries in DSL.

&lt;h3&gt;About the dynamic&lt;/h3&gt;
The mechanism of loading configurations is a kind of static way --- Gradle reads DSL and set related properties. But the power of Gradle is far more than this. For example, we can insert any code at the begining and end of a task:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;whenTaskAdded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Assets&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doLast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signingConfigs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buildType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignOnline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyFileToDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;env/assets.release/SE.bin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyFileToDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;env/assets.debug/SE.bin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Here we insert a copying logic at the end of tasks whose name starts with &quot;merge&quot; and ends with &quot;Assets&quot;. In the example the file SE.bin is copied to the output folder of take mergeXXXAssets, so it will be included in the assets folder of apk. 
&quot;afterEvaluate {}&quot; could also implement the same effect:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;afterEvaluate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// set parameter for dex task: —-multi-dex和—main-dex-list&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matching&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dexDebug&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;additionalParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;additionalParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dex&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--main-dex-list=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mianDexFilePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;additionalParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dex&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;additionalParameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--main-dex-list=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mianDexFilePath&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

The delegate object of &quot;afterEvaluate&quot; is the object of Project, as it is defined in the top level of DSL. It's a shortcut syntax, which is the same as &quot;project.afterEvaluate{}&quot;. If it is written inside a task, the default delegate is the task object. As there is no method nor field named &quot;afterEvaluate&quot;, Gradle will report the error.

&lt;h3&gt;Summary&lt;/h3&gt;
I hope you understand the essential of Gradle DSL is the mappings to Extension classes, which are loaded through Gradle plugins. Gradle is initially designed to provide a powerful way to extend the build logic through such mechanism. Indeed it's much agile than XML by Maven. However, with this mechanism the learning curve is much sharp than other build tools, especially at start time.

  &lt;p&gt;&lt;a href=&quot;http://vliux.me/blog,/gradle/gradle-dsl-dev-perspective/&quot;&gt;Gradle DSL from developer perspective&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on March 26, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Avoid Runtime.exec in UI thread]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/blog,/android/process/ui/avoid-exec-in-ui-thread/" />
  <id>http://vliux.me/blog,/android/process/ui/avoid-exec-in-ui-thread</id>
  <published>2015-09-24T03:49:00+08:00</published>
  <updated>2015-09-24T03:49:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">Several days ago I saw a ANR during monkey test. The ANR trace looked like this.
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MONITOR&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ProcessManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:~&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;206&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x410bc8b0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;held&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;176&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ProcessBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;195&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;Thread-176&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NATIVE&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ProcessManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Native&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ProcessManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;209&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;168&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

At the exact moment of ANR, Thread-176 was executing a shell command with Runtime.getRuntime.exec(), which entered the lock section in ProcessManager.exec().
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taintedCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taintedEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workingDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirectErrorStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Ensure onExit() doesn't access the process map before we add our entry.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processReferences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processReferences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/*
             * This will wake up the child monitor thread in case there
             * weren't previously any children to wait on.
             */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;processReferences&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notifyAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

So when our Main thread tried to execute a command later, it's blocked for a long time which caused the ANR. The &quot;processReferences&quot; is a HashMap which records the exit value of each child process. When ProcessManager is initialized, it creates a Thread which checks the status of every child in an infinite loop. When the status of one child process is exited or signaled, it will set the exit value accordingly.
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProcessManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Spawn a thread to listen for signals from child processes.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reaperThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;watchChildren&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

The case is clear. We should prevent calling any method which takes a lock. With lock involved, you won't know how long your UI thread will wait before other threads release the lock. Runtime.exec() should be invoked asynchronously instead. If your UI relies on the result of exec(), place it at a earlier stage and cache it for later reference. In some extreme case, use NDK to fork the process.


  &lt;p&gt;&lt;a href=&quot;http://vliux.me/blog,/android/process/ui/avoid-exec-in-ui-thread/&quot;&gt;Avoid Runtime.exec in UI thread&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on September 23, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Implement a color-picker and magnifier in Android]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/blog,/android/ui/magnifier-color-picker/" />
  <id>http://vliux.me/blog,/android/ui/magnifier-color-picker</id>
  <published>2015-09-20T03:17:00+08:00</published>
  <updated>2015-09-20T03:17:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">UI calibration is one of the latest features comes into Hurdle. With this functionality, UEDs and developers are able to check whether the UI implementation is aligned with design spec. Color-picker and magnifier is one of the feature inside. 
&lt;img src='/images/gallery/magnifier.png' alt='Magnifier' width=''/&gt;

&lt;h3&gt;Obtain bitmap from Activity&lt;/h3&gt;
The content to show inside MagnifierView is a crop from background Activity bitmap. To obtain a bitmap of the Activity:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decroView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDecorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;decroView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildDrawingCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Bitmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activityBitmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decroView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDrawingCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Prepare drawing&lt;/h3&gt;
Before implementing onDraw(), there are something to be prepared. First we have a content-bitmap and a mask-bitmap, both with the same size of the MagnifierView, say 130*130dp. The mask-bitmap is from a bitmap drawable which is a white-colored circle with transparent background. 
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// width and height is MagnifierView dimension&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the target bitmap which will be shown inside MagnifierView&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Bitmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTargetBitmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BitmapConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ARGB_8888&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// mCanvasTarget will draw into mTargetBitmap&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCanvasTarget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mTargetBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// the activity-bitmap will be cropped and drawn into mContentBitmap first&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Bitmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mContentBitmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BitmapConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ARGB_8888&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCanvasContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mContentBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// the paint object to mask the content-bitmap with mask-bitmap&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Paint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPaintMask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Paint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ANTI_ALIAS_FLAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mPaintMask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setXferMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PorterDuffXfermode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SRC_IN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// magnify matrix&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mMatrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setScale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.2f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.2f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Draw the magnifier&lt;/h3&gt;
Whenever the magnifier is moved, calculate the part of activity-bitmap which should be shown inside, copy that area into content-bitmap, as the content-bitmap is much smaller than activity-bitmap, it is cropped. Then mask the content-bitmap against the mask-bitmap, which translate the shape of content-bitmap from rectanglar to circle. 
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTouchEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MotionEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRawX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRawY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_MOVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// avoid obstruction by the finger, make the magnifier a little bit above the touch point&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mContentBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mContentBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// update the content of the magnifier&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;updateMagnifierContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// update the positon of the magnifier with WindowManager&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;updateMagnifierPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
Somebody may point out that rawY should be substract by the height of system notification bar. But in fact, the Activity window is actually drawn full-screen, the notification bar is an overlay at the top. The Activity window just leaves the area obstructed as transparent. 
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * @param bmpLtX: the top-left location X of the bitmap to be drawn
 * @param bmpLtY: the top-left location Y of the bitmap to be drawn
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateMagnifierContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bmpLtX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bmpLtY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// draw the portion of activity-bitmap into mContentBitmap, as a intermediate buffer&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mContentBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eraseColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mCanvasContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// note: negative values used&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mCanvasContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bmpLtX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bmpLtY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mCanvasContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mActivityBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPaint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mCanvasContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;mTargetBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eraseColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the drawble of mask-bitmap&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Drawable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maskDrawable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getMaskDrawable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maskDrawable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCanvasTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mCanvasTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// mask mContentBitmap with mask-bitmap, by PorterDuffXfermode(mPaintMask),&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// to make it a circle,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// with mMatrix, the content-bitmap is magnified by 20%&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mCanvasTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mContentBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMatrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPaintMask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mCanvasTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// draw other decorations ...&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// will trigger onDraw()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;invalidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mTargetBitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Please note that the parameters passed to Canvas.translate() are (-bmpLtX, -bmpLtY), instead of (bmpLtX, bmpLtY). I was quite confusing about this at the begining. Translation moves the base point (0, 0) of the Canvas to (-bmpLtX, -bmpLtY), say (-150, -200). When the activity-bitmap is then drawn to the canvas, the base point of the bitmap is actually drawn at view coordinator (-150, -200), which is out of the screen and will not displayed. So the point of bitmap (150, 200) is now drawn at view coordinator (0, 0), that exactly what I want. 

&lt;h3&gt;Update window location&lt;/h3&gt;
The MagnifierView is show atop of any Activity. It's manipulated directly by WindowManager. 
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showMagnifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutParams&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SYSTEM_ALERT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// FLAG_NOT_TOUCH_MODAL ensures that the magnifier doesn't caputre all the touch events outside the view&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLAG_ALT_FOCUSABLE_IM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLAG_HARDWARE_ACCELERATED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLAG_NOT_TOUCH_MODAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PixelFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TRANSLUCENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gravity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// only for LEFT-TOP, params.x, y will take effect&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mWindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;overlay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateMagnifierPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutParams&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mWindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;updateViewLayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



  &lt;p&gt;&lt;a href=&quot;http://vliux.me/blog,/android/ui/magnifier-color-picker/&quot;&gt;Implement a color-picker and magnifier in Android&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on September 19, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Android /proc file systemß]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/blog,/android/proc/android-procs/" />
  <id>http://vliux.me/blog,/android/proc/android-procs</id>
  <published>2015-08-16T05:32:00+08:00</published>
  <updated>2015-08-16T05:32:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">I attended AnDevCon Boston 2015 weeks ago. Compared with Google IO, it's much more like a training camp combined with some company advertisements. Fortunately I met Jonathan Levin who is the author of &quot;Android Internals&quot;. The content of this blog is mainly from his speech in the conference.
&lt;br&gt;&lt;br&gt;

The /proc file system in Android is in a standard format. That is to say, compared with /sys, its content are equal across different Android devices, so it's safe to have dependencies on /proc in you Android app. Lots of the files under this directory are useful for helping identifying Android app performance issues.
&lt;br&gt;&lt;br&gt;

We all know that process information is inside /proc/PID. In fact, Linux kernel doesn't have any concept of process. Instead, it cares about thread-group, which is normally named &quot;TGID&quot;. When a new thread group (process) is created/forked, kernel assign a new TGID, and the first thread (UI thread in Android) has the same number of TID as TGID. Information about a thread of a given process can be found at /proc/PID/task/TID. If you get into this dir you will find that it has the exact same structure as /proc/PID. 
The interesting thing is that each thread, which is regarded as &quot;task&quot;, is sensible by Linux kernel, so you can directly reach them from /proc.
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TID&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// succed, that means /proc/FOO isn't necessarily a process.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
But if you try:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// no match&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;memory related&lt;/h3&gt;
With /proc/PID/status you can get lots of detail about the process. I need to point out that 'Pid' and 'Tgid' in this file are quit comfusing. In fact the field 'Tgid' is what we think as PID (process ID); while 'Pid' is actually the thread/task ID. Other useful fields in this file for the app developer:
&lt;ul&gt;
&lt;li&gt;State: S(sleeping), R(running), T(stopped), D(uninterruptable sleep)&lt;/li&gt;
&lt;li&gt;TracerPid: any ptrace attached process, like strace or gdb&lt;/li&gt;
&lt;li&gt;VmHWN: RSS peak usage (hight-water mark)&lt;/li&gt;
&lt;li&gt;VmRSS: current RSS usage&lt;/li&gt;
&lt;li&gt;VmPeak: virtual memory hight-water mark&lt;/li&gt;
&lt;li&gt;VmSize: current virtual memory&lt;/li&gt;
&lt;li&gt;VmData: size of data segment(heap)&lt;/li&gt;
&lt;li&gt;VmStk: size of thread stacks&lt;/li&gt;
&lt;li&gt;VmExe: size of executable&lt;/li&gt;
&lt;li&gt;VmLib: shared library usage&lt;/li&gt;
&lt;li&gt;VmPTE: page table entries&lt;/li&gt;
&lt;li&gt;Threads: number of threads&lt;/li&gt;
&lt;li&gt;Cpus_allowed: bitmask of CPUS allowed&lt;/li&gt;
&lt;li&gt;voluntary_ctxt_switches: voluntray (system call induced) context switches&lt;/li&gt;
&lt;li&gt;novoluntary_ctxt_switches: nonvoluntary(preemption induced) context switches&lt;/li&gt;
&lt;/ul&gt;
The same values are also stored in machine-readable format in /proc/PID/stat, if you want to obtain these values. 
&lt;br&gt;&lt;br&gt;
/proc/PID/maps also stores the memory space occupied by different sections (libraries, stacks, heap, ...). More information can be found in /proc/PID/smaps, like RSS, PSS, clean/dirty memory usage for each section. 

&lt;h3&gt;oom_score&lt;/h3&gt;
The kernel scores of the memory usage of each process, and will kill some processes if the system is in low memory. The score for each process is stored in /proc/PID/oom_score. The higher the value it is, the more possible your process will be killed. The score can be adjusted by /proc/PID/oom_adj or oom_score_adj, with different value range (-1000 to 1000 for oom_score_adj). I'm not sure the exact difference between them, but it seems that oom_score_adj which was introduced in Linux kernel 2.6.36, is newer than oom_adj. If the system specify a nagative value in any of these files, the related process is not likely to be terminated, so you may see very large negative value (-1000 etc.) specified for many system services. From an app developer's perspective, by comparing the values in oom_score for all the processes, we can forecast whether our app are more likely to be recycled in the near future.

&lt;h3&gt;fd&lt;/h3&gt;
All the file descriptors opened by current process can be found in /proc/PID/fd. So as the app developer, if you'd like to investigate which files are currently opened, take a look into this directory. For each file named N in 'fd', you can find the offset of the file descriptor in the file as well as the flag from /proc/PID/fdinfo/N.
&lt;br&gt;&lt;br&gt;

As Jonathan mentioned, getting familiar with these file systems like /proc and /sys &quot;just opens a door to the broad Linux world&quot; for our app developers. With this knowledge we are not limited to the SDK framework. Hopefully I will use any of the knowledge in my Hurdle project --- by plugin it into your Android application, you can easily detect many performance issues. (shameless advertisement!)



  &lt;p&gt;&lt;a href=&quot;http://vliux.me/blog,/android/proc/android-procs/&quot;&gt;Android /proc file systemß&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on August 15, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Invoke super method with reflection]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/blog,/dalvik/android/reflection/invoke-super/" />
  <id>http://vliux.me/blog,/dalvik/android/reflection/invoke-super</id>
  <published>2015-07-10T21:00:00+08:00</published>
  <updated>2015-07-10T21:00:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">Occasionally, I need to invoke a method, which is defined in super class, instead of the derived class, with Java reflection.
My first approach, which is the wrong approach, was as follows:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;SuperClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derivedObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DerivedClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;superMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derivedObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSuperClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;funcName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;superMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;derivedObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Unfortunately, with this solution, the method overrided in the DERIVED class was called. It's counter-intuitive, as the Method instance is obtained from the super class. In order to explain this, I need to take a look at the framework implementation:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// in java.lang.reflect.Method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptyArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OBJECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invokeNative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declaringClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// java_lang_reflect_Method.cpp
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dalvik_java_lang_reflect_Method_invokeNative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ignore thisPtr in args[0]
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// null for static methods
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ClassObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declaringClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;......&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;meth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dvmSlotToMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;declaringClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;......&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dvmInvokeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;noAccessCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
'slot' is the field defined in java.lang.reflection.Method (Kitkat and before versions). For this case, it refers to the index inside the virtual method array, which points to the method definition in VM.
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// AOSP/dalvik/vm/reflect/Reflect.cpp
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dvmSlotToMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directMethodCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directMethods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virtualMethodCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virtualMethods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
For an overrided method, it has the same slot value for both the super and derived classes. But in my case the 'declaringClass' passed into dvmSlotToMethod() is the derived class. So the method defined in the derived class was found and executed.
&lt;br&gt;&lt;br&gt;
Fix this problem is not as easy as finding the root cause. The invokeNative() method obtains the class from the object(which is the class definition of the derived class), which prevents any solution from the Java level. In our project we have composed a native method which is similar with invokeNative(), but instead it fetchs the super class definition. If you have any better solution, don't hesitate to tell me :)

  &lt;p&gt;&lt;a href=&quot;http://vliux.me/blog,/dalvik/android/reflection/invoke-super/&quot;&gt;Invoke super method with reflection&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on July 10, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[九寨沟]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/gallery/jiuzhai/" />
  <id>http://vliux.me/gallery/jiuzhai</id>
  <published>2015-06-28T01:31:00+08:00</published>
  <updated>2015-06-28T01:31:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">As submerged by grey modern city, I can't forget the blue water of Jiuzhai Valley, and the wide green of Ruoergai prairie. 
&lt;br&gt;&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7269.JPG' alt='' width=''/&gt;
Huanglong
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7370.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7456.JPG' alt='' width=''/&gt;
Wordless blue water
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7464.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7469.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7476.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7490.JPG' alt='' width=''/&gt;
Rhinoceros lake
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7592.JPG' alt='' width=''/&gt;
Long lake
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7683.JPG' alt='' width=''/&gt;
Arrow bamboo lake
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7695.JPG' alt='' width=''/&gt;
Panda lake
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7726.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7761.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7854.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7880.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_7990.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_8013.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_8056.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_8062.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_8085.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_8103.JPG' alt='' width=''/&gt;
&lt;br&gt;

&lt;img src='/images/gallery/jiuzhai/IMG_8112.JPG' alt='' width=''/&gt;
&lt;br&gt;





  &lt;p&gt;&lt;a href=&quot;http://vliux.me/gallery/jiuzhai/&quot;&gt;九寨沟&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on June 27, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Gaps in Android development]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/blog,/android/gaps-in-android-perf-dev/" />
  <id>http://vliux.me/blog,/android/gaps-in-android-perf-dev</id>
  <published>2015-06-07T06:16:00+08:00</published>
  <updated>2015-06-07T06:16:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">&lt;a href=&quot;https://medium.com/google-developers&quot;&gt;Chet Haase&lt;/a&gt; has composed a series of good articles about Android performance. Every Android developer should read them. In fact, after reading, and with consideration of my experiences of Android app development, there are many gaps between what skills and knowledges most of the developers accuqire and need to accuqire, in order to write a good app:
&lt;li&gt;There are many profling tools (systrace, traceview, historian, developer mode, ...) But most of the developers don't know when they should use which of them.&lt;/li&gt;
&lt;li&gt;Most of the app developers don't know how to use them, and the learning cost is high in every team.&lt;/li&gt;
&lt;li&gt;With many of the tools you can get a view of what happened, but that's far from locating the code causes the defections.&lt;/li&gt;
&lt;li&gt;Memory issue is the most primary causes of performance problems, and we have been told many times the good rules. But still it's very easy to write code with heavy GC.&lt;/li&gt;
&lt;li&gt;Every device is a village, in which all the apps forms the performance of the device. But it's easy to be forgot when writting code and making profiling. Also there is no easy way to profiling the whole device.&lt;/li&gt; 

&lt;br/&gt;&lt;br/&gt;
I believe there will be some technical solution to fill most of the gaps. For our team, we have built a plugin-like system to detect the software defections and runtime, running inside host app's process space. The tool can fill some of the gaps mentioned above and we are trying to fill more.





  &lt;p&gt;&lt;a href=&quot;http://vliux.me/blog,/android/gaps-in-android-perf-dev/&quot;&gt;Gaps in Android development&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on June 06, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lives around us]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/gallery/lives-around-us/" />
  <id>http://vliux.me/gallery/lives-around-us</id>
  <published>2015-05-23T05:36:00+08:00</published>
  <updated>2015-05-23T05:36:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">I bring a Canon Powershot S110 camera with me all the time. It's tiny but professional, as it's able to output RAW image format! When getting tired at work, I'd prefer to take a 30-min walk around the campus with the camera.

Life is beautiful, even for the most tiny ones.
&lt;img src='/images/gallery/lives-around-us/IMG_3754.JPG' alt='lives around us' width=''/&gt;
&lt;br&gt;&lt;br&gt;

&lt;img src='/images/gallery/lives-around-us/IMG_3764.JPG' alt='lives around us' width=''/&gt;
&lt;br&gt;&lt;br&gt;

&lt;img src='/images/gallery/lives-around-us/IMG_3750.JPG' alt='lives around us' width=''/&gt;
&lt;br&gt;&lt;br&gt;

&lt;img src='/images/gallery/lives-around-us/IMG_3789.JPG' alt='lives around us' width=''/&gt;
&lt;br&gt;&lt;br&gt;

&lt;img src='/images/gallery/lives-around-us/IMG_3811.JPG' alt='lives around us' width=''/&gt;
&lt;br&gt;&lt;br&gt;

&lt;img src='/images/gallery/lives-around-us/IMG_3842.JPG' alt='lives around us' width=''/&gt;
&lt;br&gt;&lt;br&gt;

&lt;img src='/images/gallery/lives-around-us/IMG_3849.JPG' alt='lives around us' width=''/&gt;
&lt;br&gt;&lt;br&gt;

&lt;img src='/images/gallery/lives-around-us/IMG_3864.JPG' alt='lives around us' width=''/&gt;
&lt;br&gt;&lt;br&gt;

&lt;img src='/images/gallery/lives-around-us/IMG_3868.JPG' alt='lives around us' width=''/&gt;
&lt;br&gt;&lt;br&gt;





  &lt;p&gt;&lt;a href=&quot;http://vliux.me/gallery/lives-around-us/&quot;&gt;Lives around us&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on May 22, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Steps away from California]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/blog,/android/steps-away-from-california/" />
  <id>http://vliux.me/blog,/android/steps-away-from-california</id>
  <published>2015-03-22T06:04:00+08:00</published>
  <updated>2015-03-22T06:04:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">Last year I took on-site interview visits to two of the most greatest tech companies in the bay area. Being spent in California about two weeks and talked with so many talented geeks, I think there should be something for me that can be memorized.

&lt;h3&gt;Test, test and test&lt;/h3&gt;
We may think that testing is the work for testers, we may start coding ASAP and think about testing when it is finished, we may ....
--- all kinds of bad habits in modern software engineering. Writing code with avoidable bugs wastes both our and other's time. It's our software developer's responsibility to deliever bug-free code at first time. So please consider test cases once the software architecture and interfaces have been defined. Run test cases whenever any code is changed so that no regression can be made. 
&lt;br&gt;&lt;br&gt;
Another benifit of construct test cases as the 1st priority is that, for complicated code logic, test cases lead us to find the solution.So once get stuck, think several test cases and it makes everything clear.

&lt;h3&gt;Keep practicing, keep young, all my life&lt;/h3&gt;
No matter how many years we have worked as software engineers, we need to keep our brain activated all the time. Brain is actually quite lazy so it's easy to be content to current state, to lost interests and care nothing. Whenever we find any software interesting, think about how it works, how to design and implement it if we are the developers, think about any algorithm which it may apply, think whether the alogrithms can be used in any project we taking ... Don't limit only to your expertise area (for me it's Android), there are always something to be learn from outside that.
&lt;br&gt;&lt;br&gt;
Software programming seems to be a kind of brain-based work. However it's not true, with a well-organized body benefits a lot, at least during the interviews. Both of the companies have 2 phone screens and 5 on-site face-to-face interviews. Each interview takes about 45-60 minutes with 1-2 coding questions and there is almost no rest time during interview rounds. That means during the 4-5 hours there is only a 30 minutes break for lunch, which is a very heavy pressure on brain. For international interviewee it is much worse because we also have to fight with jet-lag. So keep physical practicing all the life, then we can be strong enough to deal with the pressure which leads to career succeess.

&lt;h3&gt;You are you&lt;/h3&gt;
It's absolutely difficult to get an offer from such great companies. But even if you fail, it doesn't mean you are bad. There are reasons for you to be given the interview opportunities. So keeps the loop after failure until succeed:
&lt;li&gt;1. Test, test and test&lt;/li&gt;
&lt;li&gt;2. Keep practicing, keep young, all my life&lt;/li&gt;
&lt;li&gt;3. if succeed, goto exit; else if too old, goto exit; else goto 1.&lt;/li&gt;

  &lt;p&gt;&lt;a href=&quot;http://vliux.me/blog,/android/steps-away-from-california/&quot;&gt;Steps away from California&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on March 21, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Android power consumption and timing tasks]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/blog,/android/android-power-consumption-and-timing-tasks/" />
  <id>http://vliux.me/blog,/android/android-power-consumption-and-timing-tasks</id>
  <published>2015-02-08T04:42:00+08:00</published>
  <updated>2015-02-08T04:42:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">On Android platforms, there are about 3 approaches to execute timing tasks so far:
&lt;li&gt;&lt;strong&gt;Handler or Timer:&lt;/strong&gt;&lt;br&gt;
    This is suitable for foreground tasks. The timing state can not be sustained once the app process being killed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AlarmManager:&lt;/strong&gt;&lt;br&gt;
    Mostly use it to manage background tasks. The timing state is maintained across app process restarts, but not persisted across device reboots. AlarmManager can be used in almost all the circumstances. However, if not without care, it may cause severe power issues.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JobScheduler：&lt;/strong&gt;&lt;br&gt;
    JobScheduler API was introduced with the release of Lollipop to improve the power issues on Android platforms. If the exact time to run a task is not strictly required, use JobScheduler instead of AlarmManager.&lt;/li&gt;
    
&lt;h3&gt;1. Handler or Timer&lt;/h3&gt;
When the app is at foreground interacting with user, use Handler or Timer to schedule timing tasks. If the app process is killed, we need to re-schedule the tasks. From the perspective of battery power, app developers need to make the schedule frequency as low as possible, and always remeber to cancel existing schedules while not needed any more as early as possible.    

&lt;h3&gt;2. AlarmManager&lt;/h3&gt;
With AlarmManager, Android system can invoke app components at single or multiple time spots to execute tasks. At the point of execution, if app process is not exist yet, Android creates it first and then triggers the the relevant components.

&lt;h5&gt;2.1 Exact and InExact modes&lt;/h5&gt;
In AlarmManager API, there are two modes at the point of when tasks will be triggered:
&lt;li&gt;&lt;strong&gt;Exact mode:&lt;/strong&gt;&lt;br&gt;
    The time when a task will be started is as precisely accurate as scheduled. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;InExact mode:&lt;/strong&gt;&lt;br&gt;
    In order to reserve battery, Android may defer the task properly based on the scheduling parameter, so that a task can be executed in batch with other tasks. &lt;/li&gt;
The exsiting of the two modes is a combination of business requirements and power conservation consideration. Android may put the device into low-power sleeping status if there has been no user interaction for a given time (we don't consider the case there are additional WakeLocks accquired). Assume there are 3 timing tasks registered with AlarmManager, all of which can wake up the device (WAKEUP type, see the next chapter) with different execution time. In case all of them are set as Exact mode, then the device will be waken up 3 times, entering sleep state after one task, until waken up again by next task. But if they are InExact mode tasks, Android system may be able to merge them so that the device may be waken up only once, in which all of the 3 tasks are executed; or the device keeps sleeping until there is any user interaction which gives the chance the run the tasks. In such cases the wake-up times of InExact mode is dynamically reduced, effectively preserves the battery power.
&lt;br&gt;&lt;br&gt;
There are multiple methods in AlarmManager for scheduling a task:
&lt;table border=&quot;1&quot; style=&quot;width:100%&quot;&gt;
    &lt;tr&gt;
        &lt;th&gt;Method&lt;/th&gt;&lt;th&gt;Before KitKat&lt;/th&gt;&lt;th&gt;Since KitKat&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;set()&lt;/td&gt;&lt;td&gt;Exact&lt;/td&gt;&lt;td&gt;InExact&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;setExact()&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Exact&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;setInexactRepeating()&lt;/td&gt;&lt;td&gt;InExact&lt;/td&gt;&lt;td&gt;InExact&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;setRepeating()&lt;/td&gt;&lt;td&gt;Exact&lt;/td&gt;&lt;td&gt;InExact&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;setWindow()&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;InExact in range&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;br&gt;&lt;br&gt;

All the repeating tasks are set as InExact mode since KitKat. If we need precise triggering time, use setExact() to set the next start time inside each execution. The impact on battery power is much more severe for repeating tasks comparing with single time tasks if the interval is set too short. It is believed to be the reason that Google changes the behavior of scheduling repeating tasks.
&lt;br&gt;&lt;br&gt;
Additionally, besides Exact and InExact, setWindow() provides an intermediate mode. The method provides two long parameters to define a time window. Android ensures a task will be executed at some point inside that window, not outside it. In case the control of InExact mode is too loose while Exact mode is too strict for business requirements, consider using setWindow().

&lt;h5&gt;2.2 Wakeup and Non-wakeup tasks&lt;/h5&gt;
There are totally 4 types of tasks scheduled by AlarmManager: ELAPSED_REALTIME, ELAPSED_REALTIME_WAKEUP, RTC, RTC_WAKEUP. In addtion to the difference of time calculation, they differs on whether devices can be waken by tasks. For a Wakeup type task, while it is in Exact mode, it is guaranteed to be started at the exact time as scheduled, no matter whether the device was sleeping or not, which is definitely negative to the power resource. We should always avoid using Wakeup types if there is no strict requirement, or any algorithm can be applied to work around.

&lt;h5&gt;2.3 An example&lt;/h5&gt;
A network provider supplies WiFi access service. As the limitation of server side architecture, they need client side to make the billing. Their initial implementation was to register a background timing task for exact every 15 minutes with setExact(RTC_WAKEUP). However, they got large complains from users that the app drained their device batteries quickly. In order to improve the user experience, they considered both InExact mode. Tasks of InExact mode are not predictable as they may not be triggered for one or even more intervals, which may cause too much business loss. So at final they choose to use setWindow() to solve this issue:
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentMillis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RTC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PendingIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
Note that RTC type is used instead of RTC_WAKEUP. As there is no network activity during system sleep, so billing that time-span is meaningless. With the scheduling window, it is assured that billing task will be executed at some points between 15 and 30 minutes later. The solution takes care of both the business requirements and power conservation.

&lt;h3&gt;The principle of JobScheduler&lt;/h3&gt;
Generally speaking, a task should be started only when all the prerequisites are fulfilled. Under traditional AlarmManager mechanism, Android system wakes up the relevant app components at the triggering point, without any consideration of the prerequisite. There are grealy possibilities that the task discovers that some prerequisites are not fulfilled right after being started. In such a case the task checks the conditions and quits immediatelly, which is totally a waste of power resources. If the prerequisites checking can be moved into a system service(system service process doesn't get killed), any un-fulfilling of conditions eliminates the necessity of app process creation and components activation. This is actually the design of JobScheduler. 
&lt;br&gt;&lt;br&gt;
With this design, it's not easy to implement a compatible version of JobScheduler for old Android versions. If we make it the way as AppCompat, then it won't provide any benefit --- the checking of prerequisites is still inside app process, so that Android system still needs to create the app process as the first step no matter whether the conditions are met or not. An negative example of this is the JobSchedulerCompat project (https://github.com/evant/JobSchedulerCompat). The library itself has severe power issues. For Android version less than Lollipop, as it depends greatly on WakefulBroadcastReceivers and WakeLocks, as well as invoking setComponentEnabledSetting(DONT_KILL_APP) which makes the app process less likely to be killed, using the library will consume more power resources, which is a paradox and self-contradiction.
&lt;br&gt;&lt;br&gt;
Compared with AlarmManager, JobScheduler has following features:
&lt;li&gt;&lt;strong&gt;less power consumption:&lt;/strong&gt;&lt;br&gt;
    It is suitable for background tasks without precise triggering time spots. It's not recommanded for foreground tasks, as the un-predictable of scheduling.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;back-off mechanism:&lt;/strong&gt;&lt;br&gt;
    set back-off policy with setBackOffCriteria(). However, back-off policy is easy to be confused on repeating tasks, so only applying back-off for single-time tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scheduling state persistant:&lt;/strong&gt;&lt;br&gt;
    Tasks registered with AlarmManager will not exist after system reboot. To solve this issue, app develpers must register a receiver for reboots, and register tasks again inside that Receiver. JobScheduler persists the data across device reboots so there is no need to worry about that.

&lt;h3&gt;Summary&lt;/h3&gt;
For any foreground task, use Handler as it's more simple, intuitive and less likely to be harmful. For background tasks without strict time requirement, use JobScheduler API on Android 5.0, and InExact mode through AlarmManager API on previous Android versions. For background tasks which seems like to be with accurate timing requirement, consider whether the requirement can be degraded by any algorithm with JobScheduler or timing window on AlarmManager. As app developer, we should be sensitive to tasks of both Wakeup type and Exact mode, as it increases the possibility of uninstallation of the app by users greatly.

  &lt;p&gt;&lt;a href=&quot;http://vliux.me/blog,/android/android-power-consumption-and-timing-tasks/&quot;&gt;Android power consumption and timing tasks&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on February 07, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Android power consumption and WakeLock]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/blog,/android/android-power-consumption-and-wakelock/" />
  <id>http://vliux.me/blog,/android/android-power-consumption-and-wakelock</id>
  <published>2015-02-04T02:01:00+08:00</published>
  <updated>2015-02-04T02:01:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">Battery resource is precious in mobile devices. Android system will put the screen, keyboard(if any) and CPU to sleep if there is no user activity for a given time span. As the device may enter sleep mode at any time, we as programmers need to manage WakeLocks manually for long-term operations.
&lt;br&gt;&lt;br&gt;
&lt;h3&gt;Do not use WakeLock frequently&lt;/h3&gt;
Any usage of WakeLock has impact on battery power, so care must be taken. It's not proper to use WakeLock in following circumstance(s):
&lt;li&gt;Foreground activity need to proceed for a long time with screen on, like a media player. If the app is not neccessary to keep running at background, then we should apply FLAG_KEEP_SCREEN_ON flag instead, or use android:keepScreenOn=&quot;true&quot; in the layout file instead. WindowManager will automatically handle the lifecycles of WakeLocks for us during Acitivity switches, and we don't need to request additional permission WAKE_LOCK.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;
Under belowing conditions, the use of WakeLock should be minimized:
&lt;li&gt;The results of the background calculation is not sensible from foreground, or any delay of the result doesn't affect the main functionalities. An example is a news app which synchronizes latest news at background. However, as the app is not at foreground, users may not be highly interested at the news. So too much synchronization is not as beneficial as expected, while consuming too much power and network resources, which offends the user greatly.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;

&lt;h3&gt;Types of WakeLocks&lt;/h3&gt;
The first parameter of PowerManager.newWakeLock() specifies the type of WakeLock:
&lt;li&gt;&lt;strong&gt;PARTIAL_WAKE_LOCK:&lt;/strong&gt; &lt;br&gt;
keeps CPU on, doesn't keep screen and keyboard. It should be used for long-time running background tasks, like Service.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;SCREEN_DIM_WAKE_LOCK:&lt;/strong&gt; &lt;br&gt;
keeps CPU on, screen on but dim, doesn't keep keyboard. Mostly we should use FLAG_KEEP_SCREEN_ON instead of using this type of WakeLock directly.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;SCREEN_BRIGHT_WAKE_LOCK:&lt;/strong&gt;&lt;br&gt;
keeps CPU and screen on, doesn't keep keyboard. Mostly we should use FLAG_KEEP_SCREEN_ON instead of using this type of WakeLock directly.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;FULL_WAKE_LOCK:&lt;/strong&gt; &lt;br&gt;
keeps CPU, screen, and keyboard on. Mostly we should use FLAG_KEEP_SCREEN_ON instead of using this type of WakeLock directly.&lt;/li&gt;
&lt;br&gt;
Despite PARTIAL_WAKE_LOCK, all other 3 types of WakeLocks will be automatically released by Android system when power button is pressed by user. With PARTIAL_WAKE_LOCK, when power button is pressed, screen is put off, but CPU will still keep running until the WakeLock is explicitly released. So in case a partial WakeLock is released too late or not released at all, the device keeps in high power-consumption mode, in a very short time the battery will be drained.
&lt;br&gt;&lt;br&gt;

&lt;h3&gt;Simple case to ensure WakeLock release&lt;/h3&gt;
A simple solution to ensure the release of WakeLock is try-catch-finally pattern.
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;WakeLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PowerManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PowerManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PARTIAL_WAKE_LOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SyncWakeLock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// turn off Reference counted&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setReferenceCounted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// use acquire() with timeout parameter&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// omit business logic ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// exception handing&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isHeld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
In code above, we use acquire(long timeout) instead of acquire(). It is used to ensure that for any case that release() is not called, the WakeLock will still be released by system after 'timeout' milli-seconds.
&lt;br&gt;&lt;br&gt;
In addition, setReferenceCounted(false) is invoked to close the reference-counted property. If it's off, no matter how many times a WakeLock is acquired, only one release() is required to withdrawn the WakeLock. On contrast, if the property is on, the WakeLock object keeps a reference counter, if and only if the number of invokations of release() is equal to acquire(), the WakeLock will be released. As the property is on by default, so I recommend to close it before acquiring the WakeLock in most normal cases.
&lt;br&gt;&lt;br&gt;

&lt;h3&gt;WakefulBroadcastReceiver and its drawbacks&lt;/h3&gt;
Normally, a background task is triggered from a broadcast. If we don't obtain a WakeLock, the device may get to sleep at any point right after onReceive(). So if a Serivce is started from onReceive(), we need to acquire a WakeLock inside onReceive(), and release the WakeLock in Service when the task is completed. As the acquiring and releasing of WakeLocks are distributed among different software modules, the complexity of code logic thus increases a lot. Officially Android SDK suggests the using of a utility class named WakefulBroadcastReceiver to handle this issue.
&lt;br&gt;&lt;br&gt;
The static method startWakefulService() of WakefulBroadcastReceiver (WBR) inserts an integer into the extra field of the Intent, which relates to the newly obtained WakeLock object. In Service class, after the completion of business logic, just pass the Intent object from onStartCommand() paramters to completeWakefulIntent(), which reads out the integer value inserted before from the Intent, gets the WakeLock and releases it. 
&lt;br&gt;&lt;br&gt;
It should be noted that, the hosting process of Service may be killed by system at any time due to memory restriction. If it's a START_REDELIVER_INTENT Service, Android will restart it at proper time and re-deliver the same Intent object to the Service. However, as previous process is killed, the related WakeLocks have all been released (link-to-death), and the static fields of WBR have been reseted. So calling completeWakefulIntent() in a restarted Service is not only meaningless, but may mistakenly release the WakeLock held by another module (with the same integer value). In such a case, we should take case of it inside onStartCommand(): 
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WakeLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStartCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// doesn't accept new request as we are handling one already.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;START_REDELIVERY_INTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// obtain the WakeLock myself.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mWakeLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PowerManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARTIAL_WAKE_LOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setReferenceCounted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;START_FLAG_REDELIVERY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Service is started by WBR, not restarted by system, so release the WakeLock from WBR&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WakefulBroadcastReceiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;completeWakefulIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// asynchronously execute the task&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ConcurrentManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// business logic ommited...&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isHeld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;mWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;mWakeLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;START_REDELIVERY_INTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
So the main purpose of using WBR is to ensure that device will not sleep during transition from Receiver to Service.
&lt;br&gt;&lt;br&gt;
In the sample of Android SDK about WBR, IntentService is used with WBR. However, as IntentService.onHandleIntent() doesn't have a parameter like the second parameter 'flags' of onStartCommand(), we are unable to identify whether the Service is started from Receiver, or re-started by Android system, which may cause the wrong releasing of WakeLock mentioned above. 

&lt;h3&gt;Summary&lt;/h3&gt;
Using WakeLock is more complicated than we normally thinkg, especially when the code is splited into many different modules and concurrent is applied. So please think WakeLock as the last solution to use. For almost all foreground cases, use FLAG_KEEP_SCREEN_ON and rely on WindowManager to handle the locks for us; for background tasks, the last but effective defence is to use acquire(long timeout) instead of acquire().

  &lt;p&gt;&lt;a href=&quot;http://vliux.me/blog,/android/android-power-consumption-and-wakelock/&quot;&gt;Android power consumption and WakeLock&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on February 03, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Battery monitoring on user phone]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/blog,/android/battery-monitoring-on-user-phone/" />
  <id>http://vliux.me/blog,/android/battery-monitoring-on-user-phone</id>
  <published>2015-01-30T04:39:00+08:00</published>
  <updated>2015-01-30T04:39:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">There are much more differences between mobile application development and servier-side/PC-client development. Mostly because the system resources are limitied on mobile devices. Battery is one of such resources which direclty impacts the user experiences. However, it's quite easy for a novice to write code with low efficiency and high power consumption. Even experienced programmers may produce code which occasionaly drains the battery under some circumstances. In a result, the team will soon be immersed by mass of complains from users.
&lt;br&gt;&lt;br&gt;

Things get more complicated if the app is large-scaled, and it's difficult to reproduce the abnormal power consumption cases in test environment. So, a mechanism is required to monitor the consumption on end-user's phones --- the production environment. With the machnism, we should be able to obtain information about the circumstance, which helps to identify the hotspots.
&lt;br&gt;&lt;br&gt;

Generally speaking the monitoring incluses three phases:
&lt;li&gt;1. Consumption checking: calculate the power usage of current application periodically.&lt;/li&gt;
&lt;li&gt;2. Behavior detection: collects the behaviors of the application which may lead to battery drain.&lt;/li&gt;
&lt;li&gt;3. Reporting: Report the collected information of 1 and 2 to a backend server for further analysis.&lt;/li&gt;
&lt;br&gt;&lt;br&gt;

&lt;h3&gt;Check battery consumption periodically&lt;/h3&gt;
Implement the power consumtion calculation in a service, and then use AlarmManager to startService() repeatedly, 24 hours etc. In order to minizie the side-effect of the service, use AlarmManager.setInexactRepeating() instead of setRepeating(). 
&lt;br&gt;&lt;br&gt;

On Android devices before 4.4 Kitkat, as the BATTERY_STATS permission is still applicable for 3rd party applications, thelogic of &lt;a href=&quot;https://android.googlesource.com/platform/packages/apps/Settings/+/ce258caa4aa5cd1ea66b839ee7231c76fcfbc8d6/src/com/android/settings/fuelgauge/BatteryStatsHelper.java&quot;&gt;BatteryStatsHelper&lt;/a&gt; can be copied and applied into your application, which calculates the consumption from processes, wakelocks, WiFi traffic and sensors, not only your application, but also others installed. The Helper gets the data from an Android system service named BatteryStats. As BatteryStats is a hidden class, you need to rely on Java reflection to invoke methods and fetch field values.
&lt;br&gt;&lt;br&gt;

On Android versions greater or equal to 4.4, you can use other methodologies to simulate the actual consumption. For example, get the CPU time from files in /proc. The data is not as accurate as from BatteryStats, but better than nothing.
&lt;br&gt;&lt;br&gt;

With the consumpton data, a series of bars can be tested against. If any of the following bars is reached, the consumption is regarded as abnormally high. You can add any additional criteria for a broder checking. 
&lt;li&gt;the background power consumption of your application process is among the topest N of all the applications on the given phone.&lt;/li&gt;
&lt;li&gt;the power consumption from wake locks and cpu is more than X% greater than last check.&lt;/li&gt;
(You need to decide the exact number of N and X for your business scenario)
&lt;br&gt;&lt;br&gt;

The data from battery checking are not precise, but if you collects them from a large number of user devices, you can figure out the consumption level of current application version. Use them as a criterion verify whether the refactory of code decreases the cosumption or not.

&lt;h3&gt;Behavior detection&lt;/h3&gt;
Consumption data don't tell you which part of your code eats up the battery. To get that information, use local version of XposedBridge. First identify the API which may lead to high consumption, and hook them. In your hooked method callback, collect the information as below:
&lt;br&gt;&lt;br&gt;
&lt;li&gt;&lt;br&gt;ActivityThread.handleReceiver()&lt;/br&gt;: concrete Broadcast receiver classes called, times of invokation, and execution time-span of onReceive().&lt;/li&gt;
&lt;li&gt;&lt;br&gt;AlarmManager.setRepeating(), .setInExactRepeating(), .setExact()&lt;/br&gt;: whether it's a wake-up alarm, the interval time-span, the target of PendingIntent. &lt;/li&gt;
&lt;li&gt;&lt;br&gt;AsyncTask.doInBackground()&lt;/br&gt;: concrete AsyncTask classes, the times and length of doInBackground() invokation.&lt;/li&gt;
&lt;li&gt;&lt;br&gt;Binder.transact()&lt;/br&gt;: concrete Binder classes, the times and length of the invokation. This covers the cases of inter-process Service execution.&lt;/li&gt;
&lt;li&gt;&lt;br&gt;ContentProvider.query(), .insert(), .update(), .delete()&lt;/br&gt;: concrete ContentProvider classes, the times and length of invokation.&lt;/li&gt;
&lt;li&gt;&lt;br&gt;SensorEventListener.onSensorChanged(), .onAccuracyChanged()&lt;/br&gt;: concrete classes of SensorEventListener, the times and length of invokations.&lt;/li&gt;
&lt;li&gt;&lt;br&gt;Service.start()&lt;/br&gt;: concrete classes of Service, the times and length of the invokations.&lt;/li&gt;
&lt;li&gt;&lt;br&gt;Thread.start()&lt;/br&gt;: concrete classes of Thread, the times and length of the invokations.&lt;/li&gt;
&lt;li&gt;&lt;br&gt;WakeLock.acquire(), .release()&lt;/br&gt;: the callers of the methods, the wakelock tags, the length of holding the wakelocks.&lt;/li&gt;
&lt;li&gt;&lt;br&gt;WifiManager.startScan()&lt;/br&gt;: the callers of the method, the times and length of the invokations.&lt;/li&gt;
&lt;li&gt;&lt;br&gt;WifiManager.createWifiLock()&lt;/br&gt;: the caller of the method, the type of wifi lock, the times of the invokations.&lt;/li&gt;

There should be more points beyond this list for hooking, like network operations. Also, the above only includes the points at Android SDK level. If your application relies on some 3rd party libraries, you can also hook APIs there, to have the information more accurate, because those 3rd-party APIs may be closer to the app level code.

&lt;h3&gt;Analysis&lt;/h3&gt;
Collecting the consumption and behavior data is only the first step to our purpose. By analyzing a large number of this kind of data should be able to help us pick out the most suspicious points inside the code. Today I have just taken the first step, I will come back to your when I have collected more data and have some experiences of analysis stories.




  &lt;p&gt;&lt;a href=&quot;http://vliux.me/blog,/android/battery-monitoring-on-user-phone/&quot;&gt;Battery monitoring on user phone&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on January 29, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Cache layout whenever you can]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/blog,/android/cache-layout-whenever-you-can/" />
  <id>http://vliux.me/blog,/android/cache-layout-whenever-you-can</id>
  <published>2014-10-31T04:45:00+08:00</published>
  <updated>2014-10-31T04:45:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">On Instagram I share the my drawings comics to friends and public folks, as well as enjoying beautiful images from others. It's one of my most frequenlty used apps.
&lt;br&gt;&lt;br&gt;

Recently one of my friends has made an Android application (I will call it 'SomeApp') similar to Instagram, mostly the home page, where there is a ListView showing multiple images with related comments below. However, the performance of the two differs greatly --- while the scrolling in Instagram is smooth and fast, scrolling in 'SomeApp' is laggy in which I can feel the obvious lost of frames.
&lt;br&gt;&lt;br&gt;

Then I decided to make a profiling of the two apps, to find the root cause of the performance hotspot. Systrace is used to get a brief view of this difference.
&lt;br&gt;&lt;br&gt;
SomeApp, Surfaceflinger process:
&lt;img src='/images/gallery/systrace_someapp.jpg' alt='Surfaceflinger of SomeApp' width=''/&gt;
&lt;br&gt;&lt;br&gt;
Instagram, Surfaceflinger process:
&lt;img src='/images/gallery/systrace_instagram.jpg' alt='Surfaceflinger of Instagram' width=''/&gt;
You can see Instagram does mostly well, but for SomeApp, a lot of frames are lost.

Systrace provides a general view but didn't give much detail on the method invokation level, so I need to use TraceView. You can sort the trace results by CPU time or Real time, both inclusive or exclusive. If your case involves multi-process issue, it's better to sort by Real time, which counts the context waiting time. In my scenario most of the executions are on main thread, so sorting by CPU time should be just good.
&lt;br&gt;&lt;br&gt;

I started at the most expensive inclusive CPU time method, which was Handler.dispatchMessage(), and traced downward with mostly time-consuming sub-routines layer by layer. Finally I reached our project code: 
&lt;br&gt;
Handler.dispatchMessage() --&gt; ... --&gt; ListView.makeAndAddView() --&gt; ... AbsListView.obtainView() --&gt;  HeaderViewListAdapter.getView() --&gt; com.our.adapter.SomeAdapter.getView() 
&lt;br&gt;&lt;br&gt;
SomeAdapter.getView() consumes 10% of the total time; while on Instagram side adapter.getView() costs less 4% of the time.
&lt;br&gt;&lt;br&gt;

After getting deeper into the implementation of SomeAdapter.getView(), I finally found the root cause. Obviously the developer understood how to avoid unneccessary layout inflation by using ViewHolder. In SomeApp, each item view of the ListView consists of: an ImageView, a custom ViewGroup (called FavorListLayout)inherited from LinearLayout containing a list of small icons of the people who 'like' this image, and a custom ViewGroup (called CommentsListLayout) inheried from LinearLayout as well showing the comments posted for the image. While FavorListLayout and CommentsListLayout themselves are indeed reused, the contents inside the two custom layouts are not.
&lt;br&gt;&lt;br&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convertView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;FavorListLayout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favorList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CommentsListLayout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commentsList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// reusing convertView, and favorList and commentsList are refered to actual views.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;favorList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;commentsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someOtherData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FavorListLayout&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearLayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;removeAllViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fav&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fav&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFavorList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favorView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LayoutInflater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;favorlist_favorview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// inlate() called&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// set properties of favorView.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;addView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;favorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Normally a FavorListLayout or CommentsListLayout contains 5-10 sub-views. So whenever SomeAdapter.getView() is called, there will be 10-20 invokation to inflate().
&lt;br&gt;&lt;br&gt;

Conclusion
After revising the corresponding code by caching the sub-views inside FavorListLayout and CommentsListLayout, the average time cost of getView() decreased from 221ms to just 31ms. So if you are implementing a ViewGroup and adding/removing views are at high frequency, you need to re-design your ViewGroup, considering cache the views inside, not only avoid calling inflate(), but also avoid creating new instances of views like TextView/ImageView.

  &lt;p&gt;&lt;a href=&quot;http://vliux.me/blog,/android/cache-layout-whenever-you-can/&quot;&gt;Cache layout whenever you can&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on October 30, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Restoring my drawing skill]]></title>
  <link rel="alternate" type="text/html" href="http://vliux.me/gallery,/comics/restoring-my-drawing-skill/" />
  <id>http://vliux.me/gallery,/comics/restoring-my-drawing-skill</id>
  <published>2014-10-25T19:26:00+08:00</published>
  <updated>2014-10-25T19:26:00+08:00</updated>
  <author>
    <name>vliux</name>
    <uri>http://vliux.me</uri>
    <email>swordmanliuxin@gmail.com</email>
  </author>
  <content type="html">Tomb Raider 9 is really a good game, as I have been attracted greatly by the courage, beautity, health and justice of Lara. Playing the game is like controlling the character inside a movice while the joy from the game overwhelmed which from any movie I saw before.
&lt;br&gt;&lt;br&gt;

In college I spent quite a lot time for drawing, trying to create a manga by my own. Unfortunately this skill had not been exercised for 8 years until I saw Lara on the screen, when the desire to create a such kind of story by my own has been re-ignited inside me.
&lt;br&gt;&lt;br&gt;

So I'm planning to make a series of illustrations about the story. This is the heroine Allysia Moorea in my design. She is brought up from a declining noble family with sympathy of the poor, well-formed, inspired at adventure. In fact, I would like to make her be the shape of the character of my heart.
&lt;br&gt;&lt;br&gt;

You may find the name a little bit wierd. I'm not good at naming people, especially at English names, so the family name was actually from a France island on Pacific.
&lt;br&gt;&lt;br&gt;

Allysia Moorea at archery(painted by professional comic pens):
&lt;img src='/images/gallery/allysia_at_archery.vliux.jpg' alt='Allysia Moorea at archery' width=''/&gt;
&lt;br&gt;&lt;br&gt;

Below is the first pencil draft of the character. As the stroke of pencil is wierd under camera, I changed to pens after it:
&lt;img src='/images/gallery/allysia_moorea_1st_draft.vliux.jpg' alt='Allysia Moorea at the 1st design' width=''/&gt;

  &lt;p&gt;&lt;a href=&quot;http://vliux.me/gallery,/comics/restoring-my-drawing-skill/&quot;&gt;Restoring my drawing skill&lt;/a&gt; was originally published by vliux at &lt;a href=&quot;http://vliux.me&quot;&gt;vliux's story&lt;/a&gt; on October 25, 2014.&lt;/p&gt;</content>
</entry>

</feed>